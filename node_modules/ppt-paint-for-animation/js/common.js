(obj => {
  let sendObj;
  const { ispringPresentationConnector } = window;
  if (ispringPresentationConnector && typeof ispringPresentationConnector === 'object') {
    sendObj = Object.assign(ispringPresentationConnector, obj);
  } else {
    sendObj = obj;
  }

  if (module && module.exports) {
    module.exports = sendObj;
  }
  if (window) {
    window.ispringPresentationConnector = sendObj;
    communication();
  }
  function communication() {
    const origin = (window.location != window.parent.location)
      ? document.referrer
      : document.location.href;
    sendObj.init = player => {
      setTimeout(() => {
        window.addEventListener('message', event => {
          const data = event.data;
          const { op, args } = JSON.parse(data);
          const fun = player[op];
          if (fun) player[op](...args);
          parent.postMessage(JSON.stringify({ result: fun ? 'success' : 'fail', type: op }), origin);
        });
      }, 500);
      player.slideChangeEvent().addHandler(function (slideIndex) {
        parent.postMessage(JSON.stringify({ slideEvent: 'slideChange', slideIndex }), origin);
      });
    };
  }

})(
  (() => {
    let playbackController = {};
    const result = {
      register,
      init: () => { }
    };
    function register(player) {
      const { init } = result;
      playbackController = player.view().playbackController();
      if (init instanceof Function) init(playbackController);
    }
    return result;
  })()
);