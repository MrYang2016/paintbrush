let getAddress = () => {
  const addressVal = location.search.match(/[^?&=]+=[^?&=]+/g);
  const addressObj = {};
  for (let i in addressVal) {
    addressObj[addressVal[i].match(/^[^=]+/)[0]] = addressVal[i].match(/(?!=)[^=]+$/)[0];
  }
  getAddress = () => addressObj;
  return addressObj;
};
export function getAddressVal() {
  return getAddress();
}

export function ajax({ url, data = null, type = 'get' } = {}) {
  const xhr = new XMLHttpRequest();
  type = type.toLocaleLowerCase();
  if (type === 'get') {
    url = getUrl(url, data);
    data = null;
  }
  const protocol = location.protocol === 'http:' ? 'http:' : 'https:';
  url = protocol + url;
  return new Promise((resolve, reject) => {
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4) {
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
          resolve({ status: true, code: xhr.status, data: xhr.responseText, url });
        } else {
          reject({ status: false, code: xhr.status, url });
        }
      }
    };
    xhr.open(type, url, true);
    if (type === 'post') xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.send(data);
  });
  function getUrl(url, data) {
    if (!data) return url;
    for (let key in data) {
      const f = url.indexOf('?') === -1 ? '?' : '&';
      let val = data[key];
      if (val instanceof Object) val = JSON.stringify(val);
      url += `${f}${encodeURIComponent(key)}=${encodeURIComponent(val)}`;
    }
    return url;
  }
}

export function parseJson(str) {
  try {
    return JSON.parse(str);
  } catch (err) {
    return false;
  }
}

export function browserType() {
  const userAgent = navigator.userAgent;
  const isOpera = userAgent.indexOf("Opera") > -1;
  const isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1 && !isOpera;
  const reIE = new RegExp("MSIE (\\d+\\.\\d+);");
  reIE.test(userAgent);
  const fIEVersion = parseFloat(RegExp["$1"]);
  return { isIE, version: fIEVersion };
}

export function createElement(name, attr) {
  const dom = document.createElement(name);
  if (attr) {
    for (let key in attr) {
      dom.setAttribute(key, attr[key]);
    }
  }
  return dom;
}

export function addHandler(element, type, handler) {
  if (element.addEventListener) {
    element.addEventListener(type, handler, false);
  } else if (element.attachEvent) {
    element.attachEvent('on' + type, handler);
  } else {
    element['on' + type] = handler;
  }
}

export function getImgUrl(url) {
  const storageData = localStorage.getItem("POLYV_PPT_IMG");
  const imgObj = parseJson(storageData) || {};
  if (imgObj[url]) return imgObj[url];
  return function (el) {
    try {
      const imgCanvas = createElement('canvas');
      const imgContext = imgCanvas.getContext("2d");
      imgCanvas.width = el.width;
      imgCanvas.height = el.height;
      imgContext.drawImage(el, 0, 0, el.width, el.height);
      imgObj[url] = imgCanvas.toDataURL('image/jpeg');
      localStorage.setItem('POLYV_PPT_IMG', JSON.stringify(imgObj));
    } catch (err) {
      console.error('不支持使用canvas缓存图片', err);
    }
  };
}

export function initREM() {
  fontSizeInit();
  addHandler(window, 'resize', fontSizeInit);

  function fontSizeInit() {
    var a = document.documentElement,
      b = a.clientWidth;
    b && (b /= 300, 2.5 < b && (b = 2.5), a.style.fontSize = 40 * b + "px");
  }
}

export const preventShake = (() => {
  let commonFun = (fun, time, callback) => {
    if (!fun || typeof fun !== 'function') return () => console.log('必须输入函数参数');
    if (isNaN(parseInt(time))) return () => console.log('时间必须为整数');
    time = parseInt(time);
    return callback(fun, time);
  };
  return {

    //最后执行
    //debounce :: function->number->function
    debounce: (fun, time) => commonFun(fun, time, (f, t) => {
      let setTime = null;
      return e => {
        if (setTime) clearTimeout(setTime);
        setTime = setTimeout(() => f(e), t);
      };
    }),

    //一开始就执行
    //immediate :: function->number->function
    immediate: (fun, time) => commonFun(fun, time, (f, t) => {
      let setTime = null, canStart = true;
      return e => {
        if (canStart) {
          canStart = false;
          f(e);
        } else {
          if (setTime) clearTimeout(setTime);
        }
        setTime = setTimeout(() => {
          canStart = true;
        }, t);
      };
    })
  };
})();

export function show(dom) {
  dom.setAttribute('style', 'display:block');
}

export function hide(dom) {
  dom.setAttribute('style', 'display:none');
}

export function isShow(dom) {
  const style = dom.getAttribute('style');
  return !!style.match('display:block');
}